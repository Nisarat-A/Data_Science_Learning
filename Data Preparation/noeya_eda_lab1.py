# -*- coding: utf-8 -*-
"""NoeyA_EDA_LAB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n7yCOeoNCw5uL8fDbe52B5gWjsExkZs0

#Exploratory Data Analysis
"""

# import package library
import numpy as np
import pandas as pd
# some imports to set up plotting
import matplotlib.pyplot as plt
import seaborn as sns

"""ในกรณีที่ใช้ Matplotlib บน Jupyther Notebook หรือ Google Colab อาจจะต้องมีการเพิ่ม Code ด้านล่างลงไปเพื่อให้สามารถแสดงได้ โดยที่ไม่ต้องใช้คำสั่ง plt.show()"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""ในกรณีใช้ IDE อื่นที่ไม่ใช่ Jupyther Notebook หรือ Google Colab ต้องเพิ่ม plt.show() เมื่อต้องการวาดกราฟออกมาทางหน้าจอ

# 1) นำเข้าข้อมูล
อ่านไฟล์ข้อมูล "churn_telecom.csv"
"""

df=pd.read_csv('churn_telecom.csv')

#ดูตัวอย่างข้อมูล 5 แถวแรก
df.head()

#ดูข้อมูล 10 แถวสุดท้าย
df.tail(10)

#สุ่มข้อมูลมา 3 แถว
df.sample(3)

"""#2) สำรวจข้อมูล"""

#ดูรายละเอียดข้อมูล
df.info()

#เรียกดูชื่อคอลัมน์
df.columns

#ดูชนิดข้อมูล
df.dtypes

#ดูค่าทางสถิติพื้นฐาน
df.describe()

#ดูค่าทางสถิติพื้นฐานสำหรับข้อมูลที่เป็น object และ bool
df.describe(include=['object',bool])

#นับจำนวนข้อมูล Churn ในแต่ละค่า
df['Churn'].value_counts()

#นับจำนวนข้อมูล International plan ในแต่ละค่า
df['International plan'].value_counts()

#ลองทำเอง นับจำนวนข้อมูลแบ่งตาม Voice mail plan
df['Voice mail plan'].value_counts()

#Summary tables
pd.crosstab(df['Churn'], df['International plan'])

#ลองทำเอง ดูจำนวนคน แยกตาม Churn และ แยกตาม State
pd.crosstab(df['Churn'], df['State'])

#นับค่า Null
df.isnull().sum()

#pivot table
df.pivot_table(['Total day calls', 'Total eve calls', 'Total night calls'],
               ['Area code'], aggfunc='mean')

#ลองทำเอง สร้าง Pivot Table 'Total day calls', 'Total eve calls', 'Total night calls'
#แบ่งตาม Churn
df.pivot_table(['Total day calls', 'Total eve calls', 'Total night calls'],
               ['Churn'], aggfunc='mean')

"""#3) ลบคอลัมน์ที่ไม่ต้องการทิ้ง"""

df.columns

#ลบคอลัมน์ State
df.drop(columns= ['State'], inplace=True)
df.columns

"""#4) Data Visualization"""

#Bar Plot
#Appropriate for lots of values in a categorical variable or discrete numeric variable

sns.countplot(x="Area code", data=df)
plt.title('Number of customers');

#Comparation (Churn)

sns.countplot(x="Area code", hue='Churn', data=df)
plt.title('Number of customers');

#ลองทำเอง
#กราฟเปรียบเทียบจำนวนลูกค้าที่ Churn กับ Voice mail plan
sns.countplot(x="Voice mail plan", hue='Churn', data=df)
plt.title('Number of customers');

#กราฟเปรียบเทียบจำนวนลูกค้าที่ Churn กับ International plan
sns.countplot(x="International plan", hue='Churn', data=df)
plt.title('Number of customers');

# boxplot ของ Total day minutes
sns.boxplot([["Total day minutes"]])

# boxplot ของ cols

sns.boxplot([df['Total day minutes'], df['Total eve minutes'], df['Total night minutes']])

df.hist()

#Histogram ของ Total night minutes

#Histogram ของ Total day minutes
df['Total day minutes'].hist()

#Histogram ของ Total eve minutes
df['Total eve minutes'].hist()

cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes']



#เปรียบเทียบจำนวนนาทีการโทรในช่วงกลางวัน ตอนเย็น และกลางคืน
plt.figure(figsize=(12,6))
sns.distplot( df["Total day minutes"] , color="skyblue",label="Day")
sns.distplot( df["Total eve minutes"] , color="green",label="Evening")
sns.distplot( df["Total night minutes"] , color="orange",label="night")
plt.legend();

#แบ่งข้อมูลออกเป็น 2 กลุ่ม
df_not_churn=df[df["Churn"]==False]
df_churn=df[df["Churn"]==True]

#Distribution of Total day minutes, comparing churn and not churn
plt.figure(figsize=(12,6))
sns.histplot( df_not_churn["Total day minutes"] , color="skyblue",label="Not Churn")
sns.histplot( df_churn["Total day minutes"] , color="red",label="Churn")
plt.legend();

#Distribution of Total eve minutes, comparing churn and not churn
plt.figure(figsize=(12,6))
sns.histplot( df_not_churn["Total eve minutes"] , color="skyblue",label="Not Churn",kde = True)
sns.histplot( df_churn["Total eve minutes"] , color="red",label="Churn",kde = True)
plt.legend();

#Distribution of Total night minutes, comparing churn and not churn

plt.figure(figsize=(12,6))
sns.histplot( df_not_churn["Total night minutes"] , color="skyblue",label="Not Churn",kde = True)
sns.histplot( df_churn["Total night minutes"] , color="red",label="Churn",kde = True)
plt.legend();

plt.figure(figsize=(12,6))
sns.histplot( df_not_churn["Total night calls"] , color="skyblue",label="Not Churn",kde = True)
sns.histplot( df_churn["Total night calls"] , color="red",label="Churn",kde = True)
plt.legend();

"""##Exercise
**แล้วถ้าอยากรู้ว่าลูกค้าที่เป็น Internation Plan มีลักษณะการโทรต่างกับลูกค้าธรรมดาอย่างไร จะ Plot อย่างไรดี ???**
"""

#สร้าง Data Frame แยก Internationa plan กับธรรมดา
df_not_inter=df[df["International plan"]=='No']
df_inper=df[df["International plan"]=='Yes']

#Distribution of Total day minutes, comparing by International plan
plt.figure(figsize=(10,4))
sns.histplot( df_not_inter["Total day minutes"] , color="pink",label="Not inter",kde = True)
sns.histplot( df_inper["Total day minutes"] , color="red",label="inter",kde = True)
plt.legend();

#Distribution of Total eve minutes, comparing by International plan
plt.figure(figsize=(10,4))
sns.histplot( df_not_inter["Total eve minutes"] , color="yellow",label="Not inter",kde = True)
sns.histplot( df_inper["Total eve minutes"] , color="green",label="inter",kde = True)
plt.legend();

#Distribution of Total night minutes, comparing by International plan
plt.figure(figsize=(10,4))
sns.histplot( df_not_inter["Total night minutes"] , color="skyblue",label="Not inter",kde = True)
sns.histplot( df_inper["Total night minutes"] , color="purple",label="inter",kde = True)
plt.legend();