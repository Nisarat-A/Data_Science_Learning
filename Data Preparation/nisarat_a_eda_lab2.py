# -*- coding: utf-8 -*-
"""Nisarat-A_EDA_LAB2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DbjJ7DZjd-W65oexyGW7d3zBrN1ZX4FM

# Import library
"""

# import package library
import numpy as np
import pandas as pd
# some imports to set up plotting
import matplotlib.pyplot as plt
import seaborn as sns

"""# Data Preprocessing

## Dealing with missing values

Import data from temporary storage:
"""



df = pd.read_csv('Operations_empty.csv')
df.head()





"""### Drop NA"""

# count NAN in each column

# drop na



# ลบแถวของข้อมูลที่มีค่า NaN ในคอลัมน์ 'Purchases'
df.dropna(subset = ['Purchases'], axis = 0, inplace = True)
df.isna().sum()

"""### Replace NA with Mean"""

# find mean of 'Sales'
sales_mean = df['Sales'].mean()

sales_mean

# แทนค่าข้อมูลที่มีค่า NaN ด้วยค่าเฉลี่ยของ Sales ในคอลัมน์ Sales
df_testfill = df.copy()
df['Sales'].fillna(value = int(df['Sales'].mean()), inplace=True)
df

# นับค่า NaN ของ df

sales_mean = df['Sales'].mean()
df['Sales'] = df['Sales'].replace(np.nan, int(sales_mean))
df

df.isna().sum()

"""## Dealing with duplicate data"""

# Construct new data frame from dictionary, data_df
data_df  = {'Name': ['Arpit', 'Riya', 'Priyanka', 'Aman', 'Arpit', 'Rohan', 'Riya', 'Sakshi'],

           'Employment Type': ['Full-time Employee', 'Part-time Employee', 'Intern', 'Intern',
                               'Full-time Employee', 'Part-time Employee', 'Part-time Employee', 'Full-time Employee'],

           'Department': ['Administration', 'Marketing', 'Technical', 'Marketing',
                          'Administration', 'Technical', 'Marketing', 'Administration']}

# data_df

df_emp = pd.DataFrame(data_df)
df_emp

#นับจำนวนข้อมูลที่มีค่าซ้ำ

"""### Drop duplicate keep first"""

bool_series = df_emp.duplicated()
bool_series

df_emp[~bool_series]

"""## Data Formatting"""

df

#สร้าง column ใหม่
df['Purchases in thousands'] = df['Purchases']/1000
df['Sales in thousands'] =df['Sales']/1000
df['Refunds in thousands'] =df['Refunds']/1000
df

#ตรวจสอบชนิดข้อมูลในแต่ละคอลัมน์
df.dtypes

#เปลี่ยนชนิดข้อมูล
df = df.astype({'Customer': object})

#ลองเช็คชนิดข้อมูลในแต่ละคอลัมน์อีกรอบ
df.dtypes

"""## Data Scaling"""

df_employee = pd.read_csv('Employees.csv')
df_employee

df_emp.info()

"""### Simple Feature Scaling"""

df_norm1 = df_employee.copy()
df_norm1

df_norm1['Age'].max()

df_norm1['Age'] = df_norm1['Age']/df_norm1['Age'].max()
df_norm1['Salary'] = df_norm1['Salary']/df_norm1['Salary'].max()
df_norm1

"""### Min-Max scaling"""

from sklearn.preprocessing import MinMaxScaler

df_norm2 = df_employee.copy()

scaler = MinMaxScaler()
df_norm2[['Age', 'Salary']] = scaler.fit_transform(df_norm2[['Age', 'Salary']])
df_norm2

"""### Standard Scaling"""

from sklearn.preprocessing import StandardScaler

df_norm3 = df_employee.copy()

scaler = StandardScaler()
df_norm3[['Age', 'Salary']] = scaler.fit_transform(df_norm3[['Age', 'Salary']])
df_norm3

"""## Grouping Numerical Value into Classes"""

df

df.head()

my_class = np.linspace(start=min(df['Sales']), stop=max(df['Sales']), num=4)

my_class

group_names = ["Low", "Medium", "High"]

df['Group Sales'] = pd.cut(df['Sales'], my_class, labels=group_names, include_lowest=True)

df

"""## Converting a categorical variable to numeric."""

df.head(3)

df['Payment Type'].unique()

df_dummies = pd.get_dummies(df['Payment Type'])

df_dummies

pd.concat([df, df_dummies], axis=1)

df['Continent'].unique()

df_dummies2 = pd.get_dummies(df['Continent'])

df_dummies2

"""# EDA

## Univariate non-graphical EDA: Categorical Data
"""

df_operations = pd.read_csv('Operations.csv')
df_operations.head(3)

df_operations.info

df_operations.describe()

df_operations.describe(include=['object',bool])



"""## Univariate non-graphical EDA: Numerical Data"""

df_operations.describe()

"""## Univariate Graphical EDA: Categorical Data"""



#สร้าง Bar plot ของ Payment Type

sns.countplot(x="Payment Type", data=df_operations)
plt.title('Number of customers');

sns.countplot(x="Continent", data=df_operations)
plt.title('Number of customers');

"""## Univariate Graphical EDA: Numerical Data

### Histogram
"""

df_operations.head()

df_operations['Purchases'].plot.hist(bins=30)

"""### Boxplot"""

df_operations['Purchases'].plot(kind='box')
plt.title("Box Plot")

"""## Multivariate Graphical EDA"""

df_operations.head()



df_Cash=df_operations[df_operations["Payment Type"]=="Cash"]
df_Credit=df_operations[df_operations["Payment Type"]=="Credit Card"]
df_Transfer=df_operations[df_operations["Payment Type"]=="Transfer"]

plt.figure(figsize=(12,6))
sns.histplot( df_Cash["Purchases"] , color="skyblue",label="Cash",kde = True)
sns.histplot( df_Credit["Purchases"] , color="purple",label="Credit Card",kde = True)
sns.histplot( df_Transfer["Purchases"] , color="pink",label="Transfer",kde = True)
plt.legend();

"""### Scatter Plot"""

df_fat = pd.read_csv('Fat_Supply_Quantity_Data.csv')
df_fat.head(3)

df_fat.dtypes

df_fat.shape

df_fat.isna().sum()

df_fat = df_fat.dropna()

df_fat.isna().sum()

df_fat.isna().sum()

df_fat.shape

df_fat.plot.scatter(x='Animal fats', y='Animal Products')



sns.lmplot(x='Vegetable Oils',y= 'Animal Products', data=df_fat)

"""### Correlation Analysis"""

from scipy import stats

pearson_coef, p_value = stats.pearsonr(df_fat['Animal Products'], df_fat['Meat'])

pearson_coef

p_value

if p_value < 0.001:
    print("High certainty")
elif p_value < 0.05:
    print("Moderate certainty")
elif p_value < 0.1:
    print("Low certainty")
else:
    print("Lack of certainty")

#หาค่า correlation ของ df_fat

plt.figure(figsize=(20, 10))
sns.heatmap(df_fat.corr())

#หาค่า correlation ของคอลัมน์ Obesity และ Animal Products ใน df_fat

cols = ['Animal Products','Obesity']
plt.figure(figsize=(10, 5))
sns.heatmap(df_fat[cols].corr(), annot=True)

from pandas.plotting import scatter_matrix

scatter_matrix(df_fat[['Animal Products', 'Meat', 'Obesity']])

"""### Cross Tab (Categorical)"""

df_operations.head()

cross_tab = pd.crosstab(index=df_operations['Country'], columns=df_operations['Payment Type'])

cross_tab

# Country Payment Type
cross_tab_prob = pd.crosstab(index=df_operations['Country'], columns=df_operations['Payment Type'], normalize="index")

cross_tab_prob

cross_tab_prob.plot(kind='bar', stacked=True)